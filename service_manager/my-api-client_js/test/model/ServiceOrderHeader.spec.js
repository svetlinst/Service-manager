/**
 * Service Manager API
 * Service process automation project
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ServiceManagerApi);
  }
}(this, function(expect, ServiceManagerApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ServiceManagerApi.ServiceOrderHeader();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ServiceOrderHeader', function() {
    it('should create an instance of ServiceOrderHeader', function() {
      // uncomment below and update the code to test ServiceOrderHeader
      //var instance = new ServiceManagerApi.ServiceOrderHeader();
      //expect(instance).to.be.a(ServiceManagerApi.ServiceOrderHeader);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new ServiceManagerApi.ServiceOrderHeader();
      //expect(instance).to.be();
    });

    it('should have the property createdOn (base name: "created_on")', function() {
      // uncomment below and update the code to test the property createdOn
      //var instance = new ServiceManagerApi.ServiceOrderHeader();
      //expect(instance).to.be();
    });

    it('should have the property updatedOn (base name: "updated_on")', function() {
      // uncomment below and update the code to test the property updatedOn
      //var instance = new ServiceManagerApi.ServiceOrderHeader();
      //expect(instance).to.be();
    });

    it('should have the property active (base name: "active")', function() {
      // uncomment below and update the code to test the property active
      //var instance = new ServiceManagerApi.ServiceOrderHeader();
      //expect(instance).to.be();
    });

    it('should have the property problemDescription (base name: "problem_description")', function() {
      // uncomment below and update the code to test the property problemDescription
      //var instance = new ServiceManagerApi.ServiceOrderHeader();
      //expect(instance).to.be();
    });

    it('should have the property isServiced (base name: "is_serviced")', function() {
      // uncomment below and update the code to test the property isServiced
      //var instance = new ServiceManagerApi.ServiceOrderHeader();
      //expect(instance).to.be();
    });

    it('should have the property isCompleted (base name: "is_completed")', function() {
      // uncomment below and update the code to test the property isCompleted
      //var instance = new ServiceManagerApi.ServiceOrderHeader();
      //expect(instance).to.be();
    });

    it('should have the property servicedOn (base name: "serviced_on")', function() {
      // uncomment below and update the code to test the property servicedOn
      //var instance = new ServiceManagerApi.ServiceOrderHeader();
      //expect(instance).to.be();
    });

    it('should have the property completedOn (base name: "completed_on")', function() {
      // uncomment below and update the code to test the property completedOn
      //var instance = new ServiceManagerApi.ServiceOrderHeader();
      //expect(instance).to.be();
    });

    it('should have the property sendEmails (base name: "send_emails")', function() {
      // uncomment below and update the code to test the property sendEmails
      //var instance = new ServiceManagerApi.ServiceOrderHeader();
      //expect(instance).to.be();
    });

    it('should have the property packaging (base name: "packaging")', function() {
      // uncomment below and update the code to test the property packaging
      //var instance = new ServiceManagerApi.ServiceOrderHeader();
      //expect(instance).to.be();
    });

    it('should have the property placeOfService (base name: "place_of_service")', function() {
      // uncomment below and update the code to test the property placeOfService
      //var instance = new ServiceManagerApi.ServiceOrderHeader();
      //expect(instance).to.be();
    });

    it('should have the property slug (base name: "slug")', function() {
      // uncomment below and update the code to test the property slug
      //var instance = new ServiceManagerApi.ServiceOrderHeader();
      //expect(instance).to.be();
    });

    it('should have the property customer (base name: "customer")', function() {
      // uncomment below and update the code to test the property customer
      //var instance = new ServiceManagerApi.ServiceOrderHeader();
      //expect(instance).to.be();
    });

    it('should have the property customerAsset (base name: "customer_asset")', function() {
      // uncomment below and update the code to test the property customerAsset
      //var instance = new ServiceManagerApi.ServiceOrderHeader();
      //expect(instance).to.be();
    });

    it('should have the property department (base name: "department")', function() {
      // uncomment below and update the code to test the property department
      //var instance = new ServiceManagerApi.ServiceOrderHeader();
      //expect(instance).to.be();
    });

    it('should have the property handedOverBy (base name: "handed_over_by")', function() {
      // uncomment below and update the code to test the property handedOverBy
      //var instance = new ServiceManagerApi.ServiceOrderHeader();
      //expect(instance).to.be();
    });

    it('should have the property acceptedBy (base name: "accepted_by")', function() {
      // uncomment below and update the code to test the property acceptedBy
      //var instance = new ServiceManagerApi.ServiceOrderHeader();
      //expect(instance).to.be();
    });

    it('should have the property servicedBy (base name: "serviced_by")', function() {
      // uncomment below and update the code to test the property servicedBy
      //var instance = new ServiceManagerApi.ServiceOrderHeader();
      //expect(instance).to.be();
    });

    it('should have the property completedBy (base name: "completed_by")', function() {
      // uncomment below and update the code to test the property completedBy
      //var instance = new ServiceManagerApi.ServiceOrderHeader();
      //expect(instance).to.be();
    });

    it('should have the property handedOverTo (base name: "handed_over_to")', function() {
      // uncomment below and update the code to test the property handedOverTo
      //var instance = new ServiceManagerApi.ServiceOrderHeader();
      //expect(instance).to.be();
    });

    it('should have the property serviceLevelAgreement (base name: "service_level_agreement")', function() {
      // uncomment below and update the code to test the property serviceLevelAgreement
      //var instance = new ServiceManagerApi.ServiceOrderHeader();
      //expect(instance).to.be();
    });

  });

}));
